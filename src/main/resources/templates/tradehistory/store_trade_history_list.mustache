<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Do+Hyeon&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.6.0/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js" type="text/javascript"></script>

    <style>
        #customHeaderColor {
            background-color: #2AC1BC !important;
        }
        h1, h2, h3, header, nav{
            font-family: 'Do Hyeon', sans-serif;
        }
        #customHeaderColor a {
            font-size: 2rem;
        }
        #sidebarMenu{
            font-size: 1.25rem;
        }
    </style>
</head>
<body>
<header class="navbar navbar-dark sticky-top bg-info flex-md-nowrap p-3 shadow" id="customHeaderColor">
    <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3 text-dark" id="customATag" href="/owner/store/main">민족의 배달 사장님 광장</a>
    <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="navbar-nav">
        <div class="nav-item text-nowrap" id="login-logout-section">

        </div>
    </div>
</header>

<div class="container-fluid">
    <div class="row">
        <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="first-item-href">
                            <span data-feather="home"></span>
                            관리 가게 선택
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="second-item-href">
                            가게 정보 관리
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="third-item-href">
                            <span data-feather="shopping-cart"></span>
                            메뉴 관리
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="fourth-item-href">
                            <span data-feather="users"></span>
                            메뉴 신규 등록
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="fifth-item-href">
                            <span data-feather="bar-chart-2"></span>
                            리뷰 관리
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="sixth-item-href">
                            <span data-feather="layers"></span>
                            주문 관리
                        </a>
                    </li>
                </ul>

            </div>
        </nav>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 mt-5">
            <div>
                <h2 class="h2">우리가게 주문관리 페이지</h2>
            </div>
            <table class="table table-striped table-hover" id="table_id">
                <thead>
                <tr>
                    <th scope="col">#주문번호</th>
                    <th scope="col">주문일시</th>
                    <th scope="col">주문결제금액</th>
                    <th scope="col">결제수단</th>
                    <th scope="col">배달주소</th> <!--사용자테이블-->
                    <th scope="col">배정기사</th> <!--식별번호 말고 기사정보 가져오려면 또 조인해야함-->
                    <th scope="col">고객전화번호</th> <!--사용자테이블-->
                    <th scope="col">배송상태</th>
                    <th scope="col">설정</th>
                </tr>
                </thead>
                <tbody>
                {{#tradeList}}
                    <tr>
                        <th scope="row">{{tradeHistoryIdx}}</th>  <!--주문식별번호-->
                        <td>{{orderDate}}</td>
                        <td>{{orderPrice}}</td>
                        <td>{{orderPayment}}</td>
                        <td>{{userBasicAddr}}{{userDetailAddr}}</td>
                        <td>{{#deliverIdx}}{{deliverIdx}}{{/deliverIdx}}{{^deliverIdx}}미배정{{/deliverIdx}}</td>
                        <td>{{userTel}}</td>
                        <td id="orderState">{{orderState}}</td>
                        <td id="optionBtn">
                            <!--JS create element-->
                        </td>
                        <input type="hidden" id="userIdxInput" value="{{userIdx}}"></input>
                        <input type="hidden" id="tradeHistoryIdxInput" value="{{tradeHistoryIdx}}"></input>
                        <input type="hidden" id="deliverIdxInput" value="{{#deliverIdx}}{{deliverIdx}}{{/deliverIdx}}{{^deliverIdx}}미배정{{/deliverIdx}}"></input>
                    </tr>
                {{/tradeList}}
                </tbody>
            </table>
        </main>

    </div>
</div>
</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
<!-- create login & logout button -->
<script>
    let stompClient = null;
    let userIdx = null;

    /** logout */
    const fooLogout = () => {
        window.sessionStorage.clear();
        alert('sessionStoreage clear success');
        location.href="/owner/store/main";
    };

    /** logint */
    const fooLogin = () => {
        location.href="/loginForm/owner";
    };

    /** fetch PATCH Request change order_state */
    const fooPatchOrderState = () => {
        const storeIdx = window.sessionStorage.getItem("storeIdx");
        let url = `/owner/store/${storeIdx}/tradehistory/${tradeHistory}`;
        fetch(url, {

        }).then(response => {

        })
    };

    /** send AcceptStomp to user */
    const fooStompToUserAccept = (event) => {
        alert(event.target.getAttribute('value')+"idx 유저에게 전송할 수락메시지:"+'수락');
        stompClient.send("/app/user/"+event.target.getAttribute('value'), {}, JSON.stringify({'message': '수락', 'tradehistoryidx':event.target.getAttribute('value-tradehistoryidx')}));
        // 패치..굳이 패치 필요없이 send받는 컨트롤러에서 service 호출해서 처리해도 될거 같음.
        location.reload();
    };
    /** send DenyStomp to user */
    const fooStompToUserDeny = (event) => {
        alert("유저에게 전송할 거절메시지:"+'거절');
        stompClient.send("/app/user/"+event.target.getAttribute('value'), {}, JSON.stringify({'message': '거절', 'tradehistoryidx':event.target.getAttribute('value-tradehistoryidx')}));
        // 패치
    };
    /** send requestStomp to deliver */
    const fooStompToDeliver = (event) => {
        alert("기사에게 전송할 요청메시지:"+'message:배정요청 tradehistoryidx'+event.target.getAttribute('value'));
        stompClient.send("/app/deliver", {}, JSON.stringify({'message': '배정요청', 'tradeHistoryIdx':event.target.getAttribute('value')})); // tradeHistoryIdx도 전송해야함
        // 패치
    }
    /** connect STOMP */
    const connect = () => {
        var socket = new SockJS('/chat');
        stompClient = Stomp.over(socket);
        stompClient.connect({}, function (frame){
            const storeIdx = window.sessionStorage.getItem("storeIdx");
            console.log('Connected: ' + frame);
            stompClient.subscribe('/topic/store/'+storeIdx, function (greeting) {
                console.log(JSON.parse(greeting.body).u_trade_history_idx);
                alert('메시지 도착');
                userIdx = JSON.parse(greeting.body).u_trade_history_idx;
                location.reload();
            });
        });
    }
    const disconnect = () => {
        if (stompClient !== null) {
            stompClient.disconnect();
        }
        console.log("Disconnected");
    };

    /** add accept or deny btn in OptionDiv */
    const fooAddOptionBtn = () => {
        // 각 input hidden 값들(userIdx) 가져오기
        const hiddenUserIdxs = document.querySelectorAll('#userIdxInput');
        let hiddenUserIdxArray = [];
        hiddenUserIdxs.forEach( hiddenUserIdx => {
            hiddenUserIdxArray.push(hiddenUserIdx.getAttribute('value'));
        });
        // 각 input hidden 값들(tradeHistoryIdxInput) 가져오기
        const hiddenTradeHistoryIdxs = document.querySelectorAll('#tradeHistoryIdxInput');
        let hiddenTradeHistoryIdxArray = [];
        hiddenTradeHistoryIdxs.forEach( hiddenTradeHistoryIdx => {
            hiddenTradeHistoryIdxArray.push(hiddenTradeHistoryIdx.getAttribute('value'));
        });

        // 각 td들의 값 가져오기
        const tds = document.querySelectorAll('#orderState');
        let qoduf = [];
        tds.forEach( td => {
            qoduf.push(td.textContent)
        });
        // td 옆의 각 설정버튼 생성영역 가져오기
        const optionDiv = document.querySelectorAll('#optionBtn');
        let optionDivBae = [];
        optionDiv.forEach( div => {
            optionDivBae.push(div);
        });
        // td의 값이 0일경우 설정버튼 생성영역에 설정버튼 생성하기
        for(let i = 0; i<qoduf.length; i++){
            if(qoduf[i]==0) { // 주문수락 전
                let acceptBtn = document.createElement('button');
                acceptBtn.setAttribute('class', 'btn btn-primary');
                acceptBtn.setAttribute('value', hiddenUserIdxArray[i]);
                acceptBtn.setAttribute('value-tradehistoryidx', hiddenTradeHistoryIdxArray[i]);
                // tradehistory도 담아둘 것.
                acceptBtn.onclick = fooStompToUserAccept;
                acceptBtn.innerHTML = '수락';

                let denyBtn = document.createElement('button');
                denyBtn.setAttribute('class', 'btn btn-danger');
                denyBtn.setAttribute('value', hiddenUserIdxArray[i]);
                denyBtn.setAttribute('value-tradehistoryidx', hiddenTradeHistoryIdxArray[i]);
                denyBtn.onclick = fooStompToUserDeny;
                denyBtn.innerHTML = '거절';

                optionDivBae[i].append(acceptBtn);
                optionDivBae[i].append(denyBtn);
            }else if(qoduf[i]==1) { // 주문 수락 후, 기사배정 전
                let sendDeliverBtn = document.createElement('button');
                sendDeliverBtn.setAttribute('class', 'btn btn-primary');
                sendDeliverBtn.setAttribute('value', hiddenTradeHistoryIdxArray[i]);
                sendDeliverBtn.onclick = fooStompToDeliver;
                sendDeliverBtn.innerHTML = '기사배정요청';
                optionDivBae[i].append(sendDeliverBtn);
            }else if(qoduf[i]==2){

            }
        }

    };

    /** set left menuBar href */
    const set_menu = () => {
        const storeIdxVal = window.sessionStorage.getItem('storeIdx');
        const ownerIdxVal = JSON.parse(window.sessionStorage.getItem("memberData"));
        let ownerIdx = ownerIdxVal.memberData.ownerIdx;
        document.getElementById('first-item-href').setAttribute('href', '/owner/selectStore/' +ownerIdx);
        document.getElementById('second-item-href').setAttribute('href', '/owner/storeInfo/' +storeIdxVal);
        document.getElementById('third-item-href').setAttribute('href', '/owner/menu/'+storeIdxVal);
        document.getElementById('fourth-item-href').setAttribute('href', '/owner/menu/create/'+storeIdxVal);
        document.getElementById('fifth-item-href').setAttribute('href', '/owner/store/'+storeIdxVal+'/reviews');
        document.getElementById('sixth-item-href').setAttribute('href', '/owner/store/tradeHistory/'+storeIdxVal);
    };

    /** 0. onload
     * 1. get sessionStorage
     * 2. create login or logout Btn
     * */
    window.onload = () => {
        // 꺼내보자
        console.log(JSON.stringify(window.sessionStorage.getItem("memberData")));

        const parentDiv = document.getElementById('login-logout-section');
        if(window.sessionStorage.getItem("token")){
            const logoutBtn = document.createElement('button');
            logoutBtn.setAttribute('class' , 'btn btn-outline-primary me-2');
            logoutBtn.onclick = fooLogout;
            logoutBtn.innerHTML = '로그아웃';
            parentDiv.appendChild(logoutBtn);

        }else{
            const loginBtn = document.createElement('button');
            loginBtn.setAttribute('class' , 'btn btn-outline-primary me-2');
            loginBtn.onclick = fooLogin;
            loginBtn.innerHTML = '로그인';
            parentDiv.appendChild(loginBtn);
        }

        // 좌측 메뉴 세팅
        set_menu();

        // 해당페이지 접수/거절 버튼 세팅
        fooAddOptionBtn();

        disconnect();
        connect();
        //console.log(stompClient.readyState); undefined 나온다..
    }


</script>