<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Do+Hyeon&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.6.0/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js" type="text/javascript"></script>

    <style>
        #customHeaderColor {
            background-color: #2AC1BC !important;
        }
        h1, h2, h3, header, nav{
            font-family: 'Do Hyeon', sans-serif;
        }
        #customHeaderColor a {
            font-size: 2rem;
        }
        #sidebarMenu{
            font-size: 1.25rem;
        }
        #article-list-pagination{
            display: none;
        }
        #invisible_div{
            width: 100%;
            height: 15rem;
        }
    </style>
</head>
<body>
<header class="navbar navbar-dark sticky-top bg-info flex-md-nowrap p-3 shadow" id="customHeaderColor">
    <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3 text-dark" id="customATag" href="/owner/store/main">민족의 배달 사장님 광장</a>
    <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="navbar-nav">
        <div class="nav-item text-nowrap" id="login-logout-section">

        </div>
    </div>
</header>

<div class="container-fluid">
    <div class="row">
        <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="first-item-href">
                            <span data-feather="home"></span>
                            관리 가게 선택
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="second-item-href">
                            가게 정보 관리
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="third-item-href">
                            <span data-feather="shopping-cart"></span>
                            메뉴 관리
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="fourth-item-href">
                            <span data-feather="users"></span>
                            메뉴 신규 등록
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="fifth-item-href">
                            <span data-feather="bar-chart-2"></span>
                            리뷰 관리
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="sixth-item-href">
                            <span data-feather="layers"></span>
                            주문 관리
                        </a>
                    </li>
                </ul>

            </div>
        </nav>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 mt-5">
            <div>
                <h2 class="h2">우리가게 주문관리 페이지</h2>
                <h3 class="h3">가게 명 : {{storeName}}</h3>
            </div>
            <table class="table table-striped table-hover text-center mt-5" id="table_id">
                <thead>
                <tr>
                    <th scope="col">#주문번호</th>
                    <th scope="col">주문일시</th>
                    <th scope="col">주문결제금액</th>
                    <th scope="col">결제수단</th>
                    <th scope="col">배달주소</th> <!--사용자테이블-->
                    <th scope="col">배정기사</th> <!--식별번호 말고 기사정보 가져오려면 또 조인해야함-->
                    <th scope="col">고객전화번호</th> <!--사용자테이블-->
                    <th scope="col">배송상태</th>
                    <th scope="col">설정</th>
                </tr>
                </thead>
                <tfoot>
                    <!-- Pagination List -->
                    <ul
                            class="article-list__pagination article-list__pagination--inactive"
                            id="article-list-pagination"
                    ></ul>
                </tfoot>
                <tbody class="article-list" id="article-list">
                    <tr>
                    </tr>
                </tbody>
            </table>
            <div id="invisible_div">

            </div>
        </main>

    </div>
</div>
</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
<!-- create login & logout button -->
<script>
    let stompClient = null;
    let userIdx = null;

    /** logout */
    const fooLogout = () => {
        window.sessionStorage.clear();
        alert('sessionStoreage clear success');
        location.href="/owner/store/main";
    };

    /** logint */
    const fooLogin = () => {
        location.href="/loginForm/owner";
    };

    /** send AcceptStomp to user */
    const fooStompToUserAccept = (event) => {
        alert(event.target.getAttribute('value')+"idx 유저에게 전송할 수락메시지:"+'수락');
        stompClient.send("/app/user/"+event.target.getAttribute('value'), {}, JSON.stringify({'message': '수락', 'tradehistoryidx':event.target.getAttribute('value-tradehistoryidx')}));
        setTimeout(function() {
            location.reload();
        }, 1000);

    };
    /** send DenyStomp to user */
    const fooStompToUserDeny = (event) => {
        alert("유저에게 전송할 거절메시지:"+'거절');
        stompClient.send("/app/user/"+event.target.getAttribute('value'), {}, JSON.stringify({'message': '거절', 'tradehistoryidx':event.target.getAttribute('value-tradehistoryidx')}));
        setTimeout(function() {
            location.reload();
        }, 1000);
    };
    /** send requestStomp to deliver */
    const fooStompToDeliver = (event) => {
        alert("기사에게 전송할 요청메시지:"+'message:배정요청 tradehistoryidx'+event.target.getAttribute('value'));
        stompClient.send("/app/chat/assign", {}, JSON.stringify({'message': '배정요청', 'tradeHistoryIdx':event.target.getAttribute('value'), 'storeIdx':window.sessionStorage.getItem("storeIdx")})); // tradeHistoryIdx도 전송해야함
        alert('요청완료');
        setTimeout(function() {
            location.reload();
        }, 1000);
    }
    /** connect STOMP */
    const connect = () => {
        var socket = new SockJS('/chat');
        stompClient = Stomp.over(socket);
        stompClient.connect({}, function (frame){
            const storeIdx = window.sessionStorage.getItem("storeIdx");
            console.log('Connected: ' + frame);
            stompClient.subscribe('/topic/store/'+storeIdx, function (greeting) {
                console.log(JSON.parse(greeting.body).u_trade_history_idx);
                alert('메시지 도착');
                userIdx = JSON.parse(greeting.body).u_trade_history_idx;
                location.reload();
            });
        });
    }
    const disconnect = () => {
        if (stompClient !== null) {
            stompClient.disconnect();
        }
        console.log("Disconnected");
    };


    /** set left menuBar href */
    const set_menu = () => {
        const storeIdxVal = window.sessionStorage.getItem('storeIdx');
        const ownerIdxVal = JSON.parse(window.sessionStorage.getItem("memberData"));
        let ownerIdx = ownerIdxVal.memberData.ownerIdx;
        document.getElementById('first-item-href').setAttribute('href', '/owner/selectStore/' +ownerIdx);
        document.getElementById('second-item-href').setAttribute('href', '/owner/storeInfo/' +storeIdxVal);
        document.getElementById('third-item-href').setAttribute('href', '/owner/menu/'+storeIdxVal);
        document.getElementById('fourth-item-href').setAttribute('href', '/owner/menu/create/'+storeIdxVal);
        document.getElementById('fifth-item-href').setAttribute('href', '/owner/store/'+storeIdxVal+'/reviews');
        document.getElementById('sixth-item-href').setAttribute('href', '/owner/store/tradeHistory/infinity/'+storeIdxVal);
    };

    /** 0. onload
     * 1. get sessionStorage
     * 2. create login or logout Btn
     * */
    window.onload = () => {
        // 꺼내보자
        console.log(JSON.stringify(window.sessionStorage.getItem("memberData")));

        const parentDiv = document.getElementById('login-logout-section');
        if(window.sessionStorage.getItem("token")){
            const logoutBtn = document.createElement('button');
            logoutBtn.setAttribute('class' , 'btn btn-outline-primary me-2');
            logoutBtn.onclick = fooLogout;
            logoutBtn.innerHTML = '로그아웃';
            parentDiv.appendChild(logoutBtn);

        }else{
            const loginBtn = document.createElement('button');
            loginBtn.setAttribute('class' , 'btn btn-outline-primary me-2');
            loginBtn.onclick = fooLogin;
            loginBtn.innerHTML = '로그인';
            parentDiv.appendChild(loginBtn);
        }

        // 좌측 메뉴 세팅
        set_menu();
        // 해당페이지 접수/거절 버튼 세팅
        //fooAddOptionBtn();
        // SOCKET
        disconnect();
        connect();
    }
</script>

<!-- infinity scroll Test -->
<script>
    /*<![CDATA[*/
    const articlesPerPageSize = 10;

    function getPageId(n) {
        return 'article-page-' + n;
    }

    function getDocumentHeight() {
        const body = document.body;
        const html = document.documentElement;

        return Math.max(
                body.scrollHeight,
                body.offsetHeight,
                html.clientHeight,
                html.scrollHeight,
                html.offsetHeight
        );
    }

    function getScrollTop() {
        return window.pageYOffset !== undefined
                ? window.pageYOffset
                : (
                        document.documentElement ||
                        document.body.parentNode ||
                        document.body
                ).scrollTop;
    }

    // result data 로 image tag 생성
    function getArticle(data) {
        // tradeHistoryIdx
        let tableData = document.createElement('td');
        tableData.className = 'article-list__item__image article-list__item__image--loading';
        tableData.innerText = data.tradeHistoryIdx;
        tableData.onload = function () {
            tableData.classList.remove('article-list__item__image--loading');
        };
        // orderDate
        let orderDateTd = document.createElement('td');
        orderDateTd.className = 'article-list__item__image';
        orderDateTd.innerText = data.orderDate;
        // orderPrice
        let orderPriceTd = document.createElement('td');
        orderPriceTd.className = 'article-list__item__image';
        orderPriceTd.innerText = data.orderPrice;
        // orderPayment
        let orderPaymentTd = document.createElement('td');
        orderPaymentTd.className = 'article-list__item__image';
        orderPaymentTd.innerText = data.orderPayment;
        // userBasicAddr + userDetailAddr
        let userAddrTd = document.createElement('td');
        userAddrTd.className = 'article-list__item__image';
        let addrData = data.userBasicAddr + data.userDetailAddr;
        userAddrTd.innerText = addrData;
        // deliverIdx <-> 미배정
        let deliverIdxTd = document.createElement('td');
        deliverIdxTd.className = 'article-list__item__image';
        if(data.deliverIdx){
            deliverIdxTd.innerText = data.deliverIdx;
        }else{
            deliverIdxTd.innerText = '미배정';
        }

        // userTel
        let userTelTd = document.createElement('td');
        userTelTd.className = 'article-list__item__image';
        userTelTd.innerText = data.userTel;
        // orderState
        let orderStateTd = document.createElement('td');
        orderStateTd.className = 'article-list__item__image';
        orderStateTd.innerText = data.orderState;
        // optionBtn - td 태그
        let optionBtnTd = document.createElement('td');
        optionBtnTd.className = 'article-list__item__image';

        // optionBtn - td 내부의 btn 태그들
        switch (data.orderState) {
            case 0 : // 주문 수락 전
                // 수락버튼 생성
                let acceptBtn = document.createElement('button');
                acceptBtn.setAttribute('class', 'btn btn-primary');
                acceptBtn.setAttribute('value', data.userIdx);
                acceptBtn.setAttribute('value-tradehistoryidx', data.tradehistoryidx);
                acceptBtn.onclick = fooStompToUserAccept;
                acceptBtn.innerHTML = '수락';
                optionBtnTd.appendChild(acceptBtn);
                // 거절버튼 생성
                let denyBtn = document.createElement('button');
                denyBtn.setAttribute('class', 'btn btn-danger');
                denyBtn.setAttribute('value', data.userIdx);
                denyBtn.setAttribute('value-tradehistoryidx', data.tradehistoryidx);
                denyBtn.onclick = fooStompToUserDeny;
                denyBtn.innerHTML = '거절';
                optionBtnTd.appendChild(denyBtn);
                break;
            case 1 : // 주문 수락 후, 기사 배정 전
                    if(data.orderDeliverPrice == 0){
                        let takeOutBtn = document.createElement('button');
                        takeOutBtn.setAttribute('class', 'btn btn-success');
                        takeOutBtn.innerHTML = '방문포장';
                        optionBtnTd.append(takeOutBtn);
                    }else{
                        let sendDeliverBtn = document.createElement('button');
                        sendDeliverBtn.setAttribute('class', 'btn btn-primary');
                        sendDeliverBtn.setAttribute('value', data.tradehistoryidx);
                        sendDeliverBtn.onclick = fooStompToDeliver;
                        sendDeliverBtn.innerHTML = '기사배정요청';
                        optionBtnTd.append(sendDeliverBtn);
                    };
                    break;
            case 2 : // 기사 배정 완료, 배달 중
                let deliveringBtn = document.createElement('button');
                deliveringBtn.setAttribute('class', 'btn btn-success');
                deliveringBtn.innerHTML = '배정완료배달중';
                optionBtnTd.append(deliveringBtn);
                break;
            case 3 : // 배달 완료
                let completeBtn = document.createElement('button');
                completeBtn.setAttribute('class', 'btn btn-secondary');
                completeBtn.innerHTML = '배달/픽업 완료';
                optionBtnTd.append(completeBtn);
                break;
            case 4 : // 주문 취소
                let orderCanceledBtn = document.createElement('button');
                orderCanceledBtn.setAttribute('class', 'btn btn-secondary');
                orderCanceledBtn.innerHTML = '주문취소';
                optionBtnTd.append(orderCanceledBtn);
        }

        // input hidden - userIdx
        let userIdxHidden = document.createElement('input');
        userIdxHidden.className = 'article-list__item__image';
        userIdxHidden.id = 'userIdxInput';
        userIdxHidden.value = data.userIdx;
        userIdxHidden.type = 'hidden';
        // input hidden - tradeHistoryIdx
        let tradeHistoryIdxHidden = document.createElement('input');
        tradeHistoryIdxHidden.className = 'article-list__item__image';
        tradeHistoryIdxHidden.id = 'tradeHistoryIdx';
        tradeHistoryIdxHidden.value = data.tradeHistoryIdx;
        tradeHistoryIdxHidden.type = 'hidden';
        // input hidden - orderDeliverPrice
        let orderDeliverPriceHidden = document.createElement('input');
        orderDeliverPriceHidden.className = 'article-list__item__image';
        orderDeliverPriceHidden.id = 'orderDeliverPrice';
        orderDeliverPriceHidden.value = data.orderDeliverPrice;
        orderDeliverPriceHidden.type = 'hidden';
        // input hidden - deliverIdx
        let deliverIdxHidden = document.createElement('input');
        deliverIdxHidden.className = 'article-list__item__image';
        deliverIdxHidden.id = 'deliverIdx';
        deliverIdxHidden.value = data.deliverIdx;
        deliverIdxHidden.type = 'hidden';


        const article = document.createElement('tr');
        article.className = 'article-list__item';
        article.appendChild(tableData);
        article.appendChild(orderDateTd);
        article.appendChild(orderPriceTd);
        article.appendChild(orderPaymentTd);
        article.appendChild(userAddrTd);
        article.appendChild(deliverIdxTd);
        article.appendChild(userTelTd);
        article.appendChild(orderStateTd);
        article.appendChild(optionBtnTd);
        article.appendChild(userIdxHidden);
        article.appendChild(tradeHistoryIdxHidden);
        article.appendChild(orderDeliverPriceHidden);
        article.appendChild(deliverIdxHidden);

        //fooAddOptionBtn();
        return article;
    }

    // 해당 page 정보를 pagination 리스트에 추가
    function addPaginationPage(page) {
        const pageLink = document.createElement('a');
        pageLink.href = '#' + getPageId(page);
        pageLink.innerHTML = page;

        const listItem = document.createElement('li');
        listItem.className = 'article-list__pagination__item';
        listItem.appendChild(pageLink);

        articleListPagination.appendChild(listItem);

        if (page === 2) {
            articleListPagination.classList.remove(
                    'article-list__pagination--inactive'
            );
        }
    }

    // ajax 로 해당 page 데이터 가져와서 뿌려주기
    function addPage(page) {

        $.ajax({
            type: 'GET',
            url: `/owner/tradeHistoryList/infinite/${window.sessionStorage.getItem("storeIdx")}`,
            data: {
                page: page, // current Page
                size: articlesPerPageSize, // max page size // 페이지당 가져올 개수
            },
            dataType: 'json',
        }).done(function (result) {
            if (result.length == 0) {
                return;
            }

            // add articleList data
            //const pageElement = document.createElement('div');
            //pageElement.id = getPageId(page);
            //pageElement.className = 'article-list__page';

            for (let i = 0; i < result.length; i++) {
                articleList.appendChild(getArticle(result[i]));
            }

            //articleList.appendChild(pageElement);

            // add articleListPagination data
            addPaginationPage(page);
        });
    }

    const articleList = document.getElementById('article-list');
    const articleListPagination = document.getElementById(
            'article-list-pagination'
    );
    let page = 0;

    // 초기 페이지
    addPage(++page);

    window.onscroll = function () {
        if (getScrollTop() < getDocumentHeight() - window.innerHeight) return;
        // 스크롤이 페이지 하단에 도달할 경우 새 페이지 로드
        addPage(++page);
    };
    /*]]>*/
</script>