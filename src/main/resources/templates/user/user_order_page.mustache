<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.12.4.min.js" ></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.1.5.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
</head>
{{>layout/main/main_header}}
<style>
    h3{
        text-align: center;
    }
</style>

<body>
<input type="hidden" id="user_idx" value="{{user_info.user_idx}}">
<input type="hidden" id="user_email" value="{{user_info.user_email}}">
<input type="hidden" id="user_nickname" value="{{user_info.user_nickname}}">

<h3 id="title">주문하기</h3>
<hr>
<div id="deliver_view">
    <div class="mb-3 row" style="float: none;">
        <label for="staticEmail" class="col-sm-2 col-form-label">우리집</label>
        <div class="col-sm-10">
            <input type="text" readonly class="form-control-plaintext" id="user_addr" value="{{user_info.user_basic_addr}}">
        </div>
    </div>

    <div class="mb-3 row" style="float: none;">
        <label for="staticEmail" class="col-sm-2 col-form-label">상세주소</label>
        <div class="col-sm-10">
            <input type="text" readonly class="form-control-plaintext" id="user_addr_detail" value="{{user_info.user_detail_addr}}">
        </div>
    </div>
</div>

{{#user_info.user_tel}}
<div class="mb-3 row" style="float: none;">
    <label for="staticEmail" class="col-sm-2 col-form-label">전화번호</label>
    <div class="col-sm-10">
        <input type="text" readonly class="form-control-plaintext" id="user_tel" value="{{user_info.user_tel}}">
    </div>
</div>
{{/user_info.user_tel}}
{{^user_info.user_tel}}
    <div class="mb-3 row" style="float: none;">
        <label for="staticEmail" class="col-sm-2 col-form-label">전화번호</label>
        <div class="col-sm-10">
            <a href="/user/kakao/tel" style="color: red">전화번호를 등록해 주세요!(클릭)</a>
        </div>
    </div>
{{/user_info.user_tel}}
<hr>
<div class="mb-3 row" style="float: none;">
    <label for="staticEmail" class="col-sm-2 col-form-label">메뉴</label>
    <div class="col-sm-10">
        <input type="text" readonly class="form-control-plaintext" id="menu_print">
    </div>
</div>
<div class="mb-3 row" style="float: none;">
    <label for="staticEmail" class="col-sm-2 col-form-label">총 수량</label>
    <div class="col-sm-10">
        <input type="text" readonly class="form-control-plaintext" id="quantity_print">
    </div>
</div>
<hr>
<div>
    <h4 style="color: cadetblue">결제 수단</h4>
    <select class="form-select" aria-label="Default select example" onchange="payment()" id="payment">
        <option value="card" selected>카드/신용카드</option>
        <option value="cash">만나서 현금 결제</option>
    </select>
</div>
<hr>
<div>
    <h4 style="color: cadetblue">결제 금액</h4>
    <div class="mb-3 row" style="float: none;">
        <label for="staticEmail" class="col-sm-2 col-form-label">주문 금액</label>
        <div class="col-sm-10">
            <input type="text" readonly class="form-control-plaintext" id="totalPrice">
        </div>
    </div>
    <div class="mb-3 row" style="float: none;" id="deliver_price">
        <label for="staticEmail" class="col-sm-2 col-form-label">배달팁</label>
        <div class="col-sm-10">
            <input type="text" readonly class="form-control-plaintext" id="deliverPrice">
        </div>
    </div>
    <hr>
</div>
<div class="mb-3 row" style="float: none;">
    <label for="staticEmail" class="col-sm-2 col-form-label">총 결제금액</label>
    <div class="col-sm-10">
        <input type="text" readonly class="form-control-plaintext" id="realTotalPrice">
    </div>
</div>
<div style="text-align: center">
    <button type="button" class="btn btn-primary btn-sm" onclick="location.href='/user/shopping/list'">돌아가기</button>
    <button type="button" class="btn btn-primary btn-sm" onclick="requestPay()" id="b_order">결제하기</button>
</div>
{{>layout/main/main_footer}}
</body>
<script>
    //주문 or 배달일 경우 화면에 보이는 값들
    let deliver_or_take_out = sessionStorage.getItem('deliver_or_take_out');
    if(deliver_or_take_out == 'deliver'){
        document.getElementById('deliver_view').style.display = 'block';
    }else{
        document.getElementById('title').innerText = '포장';
        document.getElementById('deliver_view').style.display = 'none';
    }

    let shoppingList = JSON.parse(sessionStorage.getItem('item'));

    //메뉴 이름, 수량, 금액 추출
    let totalPrice = 0;     //배달비 제외 총 금액
    let menu_names = [];    //메뉴들 담을 배열
    let menu_idx = [];
    let menu_quantity = []  //각 메뉴 수량
    let menu_total_quantity = 0; //각 메뉴 수량 합
    shoppingList.forEach( (list, idx) => {
        //메뉴들 배열에 담기
        menu_names.push(list[3]);
        //메뉴 idx 배열 담기
        menu_idx.push(list[1]);
        //각 메뉴 수량 합
        menu_total_quantity += list[6];

        let menu_name_text = `<input type="hidden" id="menu_name${idx}" value="${list[3]}">`
        let div_menu_name = document.createElement('dev');
        div_menu_name.innerHTML = menu_name_text;
        document.body.appendChild(div_menu_name);

        let menu_quantity_text = `<input type="hidden" id="menu_quantity${idx}" value="${list[6]}">`
        let div_menu_quantity = document.createElement('dev');
        div_menu_quantity.innerHTML = menu_quantity_text;
        document.body.appendChild(div_menu_quantity);

        totalPrice += list[7];

        menu_quantity.push(list[6]);
    })

    //화면에 뿌리기
    document.getElementById('menu_print').value = `${menu_names} `;
    document.getElementById('quantity_print').value = `${menu_total_quantity }개 `;
    document.getElementById('totalPrice').value = `${totalPrice}원`;

    //포장일 경우 배달팁 제외
    if(deliver_or_take_out == 'deliver'){
        //배달일 경우 총 금액에 배달비 포함
        totalPrice = totalPrice + parseInt(shoppingList[0][5]);
        document.getElementById('deliverPrice').value = `${shoppingList[0][5]}원`;
        document.getElementById('realTotalPrice').value = `${totalPrice}원`;
        document.getElementById('b_order').innerText = `${totalPrice}원 결제하기`;
    }else{
        //포장일 경우 배달비 제외 총 금액 그대로 적용
        document.getElementById('realTotalPrice').value = `${totalPrice}원`;
        document.getElementById('b_order').innerText = `${totalPrice}원 결제하기`;
        document.getElementById('deliver_price').style.display = 'none';
    }
    console.log(totalPrice);

    //값 가져오기
    // let menu_name_join =  menu_names.join(" ");     //배열 요소들 하나의 문자열로 합침
    let menu_name_str = ''; //결제창에 보일 메뉴 문자열
    let menu_name_quantity = menu_names.length;
    if(menu_names.length > 1){
        menu_name_str = menu_names[0] +' 외 ' + (menu_name_quantity - 1) + '개';
    }else{
        menu_name_str = menu_names[0];
    }

    let user_tel = document.getElementById('user_tel')?.value;   //연락처
    let user_addr = document.getElementById('user_addr').value; //주소
    let user_addr_detail = document.getElementById('user_addr_detail').value;
    let user_email = document.getElementById('user_email').value;
    let user_nickname = document.getElementById('user_nickname').value;
    let user_addr_join = user_addr + ' ' + user_addr_detail

    //지불 수단
    let user_payment = $("#payment option:selected").val();
    const payment = () => {
        user_payment = $("#payment option:selected").val();
    }
    let user_idx = document.getElementById('user_idx').value;
    let menu_idx_join = menu_idx.join(",");
    let menu_quantity_join = menu_quantity.join(",");

    const requestPay = () => {
        console.log('user_tel -> ' + user_tel)
        if(user_tel === undefined){
            alert('전화번호를 등록해 주세요!');
            return;
        }
        if(user_payment == 'card'){     //카드로 결제하는 경우
            let IMP = window.IMP;
            IMP.init("imp23989875");
            IMP.request_pay({
                pg: "html5_inicis", // PG사 선택
                pay_method: user_payment, // 지불 수단
                merchant_uid: 'merchant_' + new Date().getTime(), //가맹점에서 구별할 수 있는 고유한id
                name: menu_name_str, // 상품명
                amount: totalPrice, // 가격
                buyer_tel: user_tel, // 구매자 연락처
                buyer_addr: user_addr_join,// 구매자 주소지
                buyer_email: user_email,
                buyer_name: user_nickname,
                m_redirect_url : 'https://example.com/mobile/complete', // 모바일 결제시 사용할 url
                digital: true, // 실제 물품인지 무형의 상품인지(핸드폰 결제에서 필수 파라미터)
                app_scheme : '' // 돌아올 app scheme
            }, function (rsp) { // callback
                if (rsp.success) { // 결제 성공 시: 결제 승인 성공한 경우
                    // jQuery로 HTTP 요청
                    jQuery.ajax({
                        url: "/user/payment", // 가맹점 서버
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        data: JSON.stringify({
                            imp_uid: rsp.imp_uid,
                            merchant_uid: rsp.merchant_uid,
                            order_deliver_price: shoppingList[0][5],
                            order_payment: user_payment,
                            order_price: totalPrice,
                            store_idx: shoppingList[0][0],
                            user_idx: user_idx,
                            count: menu_quantity_join,
                            menu_idx: menu_idx_join,
                            order_deliver_or_take_out: deliver_or_take_out
                        })
                    }).done(function(data) { // 응답 처리
                        if(data.status == 'SUCCESS'){

                            //소켓 연결
                            let socket = new SockJS('/chat');
                            let stompClient = Stomp.over(socket);
                            stompClient.connect({}, function (frame) {
                                console.log('Connected: ' + frame);
                                //응답 보내기
                                stompClient.send(`/app/store/${shoppingList[0][0]}`,
                                        {},
                                        JSON.stringify({
                                            'u_trade_history_idx': data.data})
                                );
                            });

                            sessionStorage.removeItem('item');
                            sessionStorage.removeItem('deliver_or_take_out');
                            alert('결제가 완료되었습니다.');
                            setTimeout(function() {
                                location.href = `/user/order/detail`;
                            }, 1500);
                        }else{
                            alert('db에 값이 안 들어감.');
                        }
                    });
                } else {
                    alert(rsp.error_msg);
                }
            });
        }else{      //만나서 현금 결제하는 경우
            fetch('/user/payment', {
                method: 'POST',
                body: JSON.stringify({
                    order_deliver_price: shoppingList[0][5],
                    order_payment: user_payment,
                    order_price: totalPrice,
                    store_idx: shoppingList[0][0],
                    user_idx: user_idx,
                    count: menu_quantity_join,
                    menu_idx: menu_idx_join,
                    order_deliver_or_take_out: deliver_or_take_out
                }),
                headers: { "Content-Type": "application/json" }
            })
            .then((response) => response.json())
            .then((data) => {
                if(data.status == 'SUCCESS'){
                    // //소켓 연결
                    let socket = new SockJS('/wss/chat');
                    let stompClient = Stomp.over(socket);
                    stompClient.connect({}, function (frame) {
                        //응답 보내기
                        console.log('Connected: ' + frame);
                        stompClient.send(`/app/store/${shoppingList[0][0]}`,
                                {},
                                JSON.stringify({
                                    'u_trade_history_idx': data.data})
                        );
                    });

                    // sessionStorage.removeItem('item');
                    // sessionStorage.removeItem('deliver_or_take_out');
                    // alert('주문이 완료되었습니다.');
                    // setTimeout(function() {
                    //     location.href = `/user/order/detail`;
                    // }, 1000);
                }
            });
        }
    }
</script>
</html>