<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.minbae.comm.tradehistory.dao.TradeHistoryMapper">

    <select id="findTradeListByStoreIdx" resultType="com.minbae.comm.tradehistory.dto.StoreTradeHistoryListDto">
        select t.*, u.user_nickname, u.user_basic_addr, u.user_detail_addr, u.user_tel
        from trade_history t
                 left join user u on u.user_idx = t.user_idx
                 left join deliver d on t.deliver_idx = d.deliver_idx
        where t.store_idx = #{storeIdx}
        order by t.trade_history_idx desc;
    </select>

    <update id="updateOrderState">
        update trade_history set order_state = #{orderState}
        where trade_history_idx = #{tradehistoryidx};
    </update>

    <select id="selectOrderPrice" resultType="hashmap">
        select
            x.ok as today_date
            ,ifnull(y.s,0) as order_price
        from (   select a.Date as ok
                 from (
                       select curdate() - INTERVAL (a.a + (10 * b.a)) DAY as Date
                       from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a
                       cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b
                       ) a
                 where a.Date between #{oneMonthBefore} and #{today}
        ) x left outer join
        (SELECT
            MID(order_date, 1,10) as Month
            ,sum(order_price) as s
        FROM
            trade_history
        where store_idx = #{storeIdx}
        group by
           Month
        ) y on x.ok= y.Month order by x.ok;
    </select>

</mapper>